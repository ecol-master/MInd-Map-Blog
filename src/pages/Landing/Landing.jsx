import React from "react";
import "./Landing.scss";

export const Landing = () => {
  return (
    <>
      <div className="page__content__landing">
        <div className="landing__block1__wrapper">
            <h2>Здесь вы можете найти полезную информацию для </h2>
            <img src="" alt="" />
            <h1 id="-">Основные парадигмы программирования</h1>
<h2 id="-">Процедурное</h2>
<p>Определите, какие процедуры вам нужны, используйте лучшие из известных вам алгоритмов.</p>
<h2 id="-">Модульное</h2>
<p>Определите, какие модули нужны, поделите программу так, чтобы данные были скрыты в этих модулях.</p>
<h2 id="-">Объектно-ориентированное программирование</h2>
<p>Определите, какой класс вам необходим, предоставьте полный набор операций для каждого класса, общность классов выразите явно с помощью наследования.</p>
<h2 id="-">Обобщенное программирование</h2>
<p>Заключается в таком описании данных и алгоритмов, которое можно применять к различным типам данных, не меняя само это описание. Вместо описания отдельного типа в обобщённом программировании применяется описание семейства типов, имеющих общий интерфейс и семантическое поведение.</p>
<h1 id="-">Первая программа</h1>
<pre><code class="lang-c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span>

</code></pre>
<p><strong>Main</strong> - главная функция программы. Любая программа на Си содержит функцию main. Функция main может быть в любом месте программы. Выполнение любой программы начинается с функции <code>main</code>. 
Функция main должна быть только <strong>однain</strong> - главная функция программы. 
Любая программа на Си содержит функцию <code>main</code>. 
Функция main может быть в любом месте программы. 
Выполнение любой программы начинается с функции.
Функция main должна быть только одна.</p>
<h1 id="-">Оформление комментариев</h1>
<ul>
<li>Заглавный комментарий. Размещайте заглавный комментарий, который описывает назначение файла, вверху каждого файла.</li>
<li>Заголовок функции. Разместите заголовочный комментарий на каждой функции вашего файла.</li>
<li>Заголовок должен описывать поведение и / или цель функции.</li>
<li>Параметры / возврат. Если ваша функция принимает параметры, то кратко опишите их цель и смысл. Если ваша функция возвращает значение — кратко опишите, что она возвращает.</li>
<li>Комментарии на одной строке. Если внутри функции имеется секция кода, которая длинна, сложна или непонятна, то кратко опишите её назначение.</li>
</ul>
<h1 id="-">Переменные</h1>
<p>Переменная – это объект данных, который явным образом определен и именован в программе.</p>
<p>Переменные характеризуются с помощью следующих атрибутов:</p>
<ul>
<li>имя;</li>
<li>тип;</li>
<li>значение;</li>
<li>адрес;</li>
<li>время жизни;</li>
<li>область видимости.<h2 id="-">Соглашения по именованию переменных</h2>
</li>
<li>Имена переменных записываются в смешанном регистре, начиная с нижнего (camelStyle)</li>
<li>Имена следует записывать по-английски</li>
<li>Переменные, имеющие большую область видимости, следует называть длинными именами, имеющие небольшую область видимости — короткими</li>
<li>Префикс n следует использовать для представления числа объектов</li>
<li>Суффикс No следует использовать для обозначения номера сущности</li>
<li>Префикс is следует использовать только для логических переменных и методов (допускается замена на can, has, should)</li>
</ul>
<h1 id="-">Тип данных</h1>
<p>Тип данных определяет:</p>
<ul>
<li>внутреннее представление данных в памяти компьютера;</li>
<li>объем памяти, выделяемый под данные;</li>
<li>множество (диапазон) значений, которые могут принимать величины этого типа;</li>
<li>операции и функции, которые можно применять к данным этого типа.<h2 id="-">Целочисленные типы</h2>
</li>
<li>Описание переменной, имеющей тип int, сообщает компилятору, что он должен связать с идентификатором (именем) переменной количество памяти, достаточное для хранения целого числа во время выполнения программы.</li>
<li>Границы диапазона целых чисел, которые можно хранить в переменных типа int, зависят от конкретного компьютера, компилятора и операционной системы (от реализации).</li>
<li>Для внутреннего представления знаковых целых чисел характерно определение знака по старшему биту (0 – для положительных, 1 – для отрицательных). Поэтому число 0 во внутреннем представлении относится к положительным значениям. Следовательно, наблюдается асимметрия границ целых промежутков.</li>
<li><p>В целочисленных типах для всех значений определены следующий и предыдущий элементы. Для максимального следующим значением будет являться минимальное в этом же типе, предыдущее для минимального определяется как максимальное значение. То есть целочисленный диапазон условно можно представить сомкнутым в кольцо.</p>
<h2 id="-">Вещественные тип</h2>
</li>
<li><p>Величина с модификатором типа float занимает 4 байта. Из них 1 бит отводится для знака, 8 бит для экспоненты и 23 бита для мантиссы. Старший бит мантиссы всегда равен 1, поэтому он не заполняется.</p>
</li>
<li>Величина типа double занимает 8 байтов в памяти. Ее формат аналогичен формату float. Биты памяти распределяются следующим образом: 1 бит для знака, 11 бит для экспоненты и 52 бита для мантиссы. Старший бит мантиссы также </li>
<li>пропускается</li>
</ul>
<h2 id="-">Символьный тип</h2>
<ul>
<li><p>Переменная типа char рассчитана на хранение только одного символа (например, буквы цифры или пробела). В памяти компьютера символы хранятся в виде целых чисел. Соответствие между символами и их кодами определяется таблицей кодировки, которая зависит от компьютера и операционной системы. 
Почти во всех таблицах кодировки есть прописные и строчные буквы латинского алфавита, цифры 0, ..., 9, и некоторые специальные символы. Самой распространенной таблицей кодировки является таблица символов ASCII ( American Standard Code for Information Interchange – Американский стандартный код для обмена информацией).</p>
</li>
<li><p>Так как в памяти компьютера сим</p>
</li>
<li></li>
<li>волы хранятся в виде целых чисел, то тип char на самом деле является подмножеством типа int</li>
</ul>
<h1 id="-">Модель памяти компьютера</h1>
<ul>
<li>Память дискретна, состоит из отдельных байтов.</li>
<li>Каждый байт пронумерован, номер байта называется адресом.</li>
<li>Минимально доступный программисту участок памяти – один байт.</li>
<li>Переменная может занимать больше одного байта.</li>
<li>Обычная переменная не может занимать меньше одного байта.</li>
<li>Все байты, занимаемые переменной, идут подряд.</li>
<li>Адрес переменной – адрес старшего байта (или младшего)<h2 id="-">Время жизни и область видимости</h2>
<strong>Время жизни</strong> – это время, в течение которого переменная связана с определенной областью памяти. Определяется классом памяти. Может быть:</li>
<li>локальным;</li>
<li>глобальным.</li>
</ul>
<p><strong>Область видимости</strong> – это блок программы, из которого можно обратиться к переменной. 
Может быть:</p>
<ul>
<li>блок;</li>
<li>функция;</li>
<li>файл;</li>
<li>вся программа.</li>
</ul>

        </div>
        
      </div>
    </>
  );
};
