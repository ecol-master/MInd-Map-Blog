import React from "react";
import Article from "./Article";

const HowToStartInC = () => {
  return (
    <Article articleName={"How To Start Programming IN C"}>
      <p>
        Как ни странно, этот язык <strong>не вращается в гробу у ВМК, как Паскаль</strong>. Вполне жив, хоть и в
        основном на компактном рынке системного программирования (драйверы для джойстика или там модули ядра писать
        дяденьки за копейки). Ещё он часто используется для последующего перехода на C++, чтобы запустить стартап,
        подписать контракт с IBM, <strong>вырезать всех конкурентов</strong>, и тупо{" "}
        <strong>отдать все свое состояние</strong> фонду.
      </p>
      <p>
        <strong>Все книжки в комментариях, там же делимся своим опытом и материалами.</strong>
      </p>
      <p>
        <strong>Шаг 0.</strong>{" "}
      </p>
      <p>
        Лучше ботать Сишку в её естественной среде обитания, которой является <strong>UNIX</strong> (на нем она и
        написана). Так как далеко не все версии никсов доступны и просты, ставим (сравнительно) несложный дистрибутив{" "}
        <strong>Linux</strong> (Ubuntu, Fedora, Mint, Debian, не Arch и не Gentoo). Ко всему, эти системы
        распространяются под свободными лицензиями, поэтому можно получить бесплатно (это та самая халява, которую зовут
        физтехи перед НК). Вообще это профессиональный стандарт, причём не только для разработчиков.
      </p>
      <p>1) Ставим Линукс, привыкаем к нему, любим его;</p>
      <p>
        2) Читаем и практикуем по жизни всю книгу <em>А. В. Столярова</em> (под боевым псевдонимом Столяр) по{" "}
        <strong>UNIX</strong> (кроме главы <em>&quot;Инструментарий программиста&quot;</em>). Можно вместо этого читать
        его же <em>&quot;Программирование: введение в профессию&quot;, том 1</em>, но лишь главы 1.1-1.2. Автор хоть и
        неисправимый сторонник Паскаля на 1 курсе, но пособия годные, поэтому разобраться на уровне продвинутого
        пользователя в Линуксе можно;
      </p>
      <p>
        3) Полезно пописать скриптики. Скорее всего, будет достаточно повседневного использования и заданий &quot;
        <em>Командная строка Unix</em>&quot; из задачника Столяра{" "}
      </p>
      <p>
        4) Освоить <strong>Git</strong> и <strong>GitHub</strong> (это разное!). Для начала хватит связать их по{" "}
        <strong>SSH</strong> и понять, что и как с <strong>push, pull, add, commit, branch, checkout, merge...</strong>
      </p>
      <p>
        <strong>Шаг 1.</strong>{" "}
      </p>
      <p>Переходим непосредственно к языку и программированию.</p>
      <p>
        1) Читаем книгу <em>Стивена Праты &quot;Язык программирования C. Лекци и упражнения&quot;</em>{" "}
        <strong>строго в 6 издании</strong>. Делаем все упражнения (здесь очень пригодится{" "}
        <strong>Git&amp;GitHub</strong>), разбираем все примеры (очень хорошие и современны). Книга именно по
        программированию, но на языке Си. То есть научитесь и языку, и прогать с нуля. Все объяснения чёткие и верные, а
        главное даже понятные. В этом и уникальность.{" "}
      </p>
      <p>
        Но за всё нужно платить: в ней <strong>900+ страниц</strong>. Ботая (читая и решая) в среднем по главе в три дня
        можно заботать всю книгу за полтора месяца в неспешном темпе.
      </p>
      <p>
        2) Устройство компьютера и общие сведения из <strong>Computer Science</strong>.{" "}
      </p>
      <p>
        В данном случае вполне подойдут книги{" "}
        <em>Владстона Фило серии &quot;Теоретический минимум по Computer Science&quot;</em> (сначала первая, зелёная,
        потом, возможно, остальные, пока их две). Также подойдут главы 1.3-1.4 из всё той же книги <em>Столяра</em>.
        Первые книги представляют из себя чуть-чуть теории с примерами на задачах, похожих на реальные. Последняя
        чуть-чуть перегружена математикой. Начинать читать их стоит не сильно раньше главы 11 в <em>Прате</em>;
      </p>
      <p>
        3) Будет очень хорошей идеей научиться элементарной отладке программ с помощью <strong>gdb, valgrind</strong> и{" "}
        <strong>address sanitizer</strong>. Ещё лучше познакомиться с <strong>GUN</strong> <strong>make</strong> и{" "}
        <strong>Doxygen</strong>. Всё это понадобится как на <strong>Си</strong>, так и в &quot;<strong>Плюсах</strong>
        &quot;... И много где ещё.
      </p>
      <p>
        <strong>Шаг 2.</strong>{" "}
      </p>
      <p>
        Теперь на дно, то есть глубоко в код. Можно начать сразу с этого шага, если{" "}
        <strong>очень близкое знакомство</strong> с программированием состоялось ранее.
      </p>
      <p>
        1) Читаем <em>&quot;Язык программирования C&quot; Кернигана и Ритчи</em>, во втором издании (оно же &quot;ANSI
        C&quot;).{" "}
      </p>
      <p>
        Если читали <em>Прату</em>, то можно не сильно спешить с <em>K&amp;R.</em> Авторы принимали участие в разработке
        и стандартизации языка, поэтому точнее и яснее описать язык не сможет никто. Читаем и делаем заинтересовавшие
        упражнения. Советую делать именно те, которые кажутся читателю прикладными и полезными;
      </p>
      <p>
        2) Читаем книгу <em>Хэзфилда &quot;Искусство программирования на C&quot;</em> и, быть может,{" "}
        <em>Роба и Кернигана &quot;Практика программирования&quot;.</em>{" "}
      </p>
      <p>
        В них рассмотрены основные моменты практической разработки. Никакого олимпиадного кода 5 задач в 5 часов. Даже
        ПТУшнику ясно, что на работе не будет необходимости соревноваться с коллегами. Обратите особое внимание на то,
        что <strong>можно иногда пренебречь крохами в производительности в угоду читаемости и красоты кода</strong>.
        Упражнения из книг решать стоит (или, возможно, дорабатывать примеры из текста). В остальном, где-то с середниы
        КР можно начать одну из них и радоваться жизни. Применять полезное из них повсеместно;
      </p>
      <p>
        3) Найти подружку (или друга, <strong>главное, чтобы пол не отвлекал и вас не абьюзили</strong>) для совместного
        программирования. Используйте Гитхаб для совместной работы. Пишите действительно интересные и{" "}
        <strong>похожие на полезные программы.</strong> Примерами могут служить задачи и этюды из задачника{" "}
        <em>Столяра</em>, но только те, которые интересны.{" "}
        <strong>
          Поработать на дядю ещё успеете: &quot;вкладывайтесь в свое будущее&quot; и живите в общаге с 4-мя дебилами
          (считая вас)
        </strong>
        . Если же не терпится <strong>стать лакеем капитала и продать свою душу за копейки</strong>, то начинать можно
        при разборе книг Шага 2.
      </p>
      <p>
        <strong>Шаг...</strong>{" "}
      </p>
      <p>
        Бежим! Когда основы (да, это были они) программирования заботаны и написано суммарно{" "}
        <strong>не менее 2500-3000 &quot;чистых&quot;</strong> (непустых, документация в счёт) строк хорошего кода на{" "}
        <strong>Си</strong> в больших проектах из <strong>Шага 2</strong> и из них есть хотя бы один на{" "}
        <strong>700 строк и более</strong>, можно применять свои знания и навыки для получения дальнейших знаний.{" "}
      </p>
      <p>
        <strong>Зачем учить именно Си?</strong> Это простой язык (причём очень простой и компактный), на основе которого
        можно понять, как именно надо программировать (документирование, декомпозиция кода, модульность и её
        преимущества, обработка ошибок, приёмы и инструменты отладки) на любом языке и как этот язык правильно заботать.
        Кроме того, далее он понадобится для изучения <strong>ООП</strong> и <strong>АТД</strong> на{" "}
        <strong>C++</strong>, операционных систем и компьютерных основ программирования с применением{" "}
        <strong>языков ассемблера</strong> и <strong>Си</strong>.{" "}
      </p>
      <p>
        Что касается применения самого языка, он используется в системном <strong>(ОС</strong>и и загрузчики для них,
        компиляторы, драйверы, демоны, вредоносы и защита от них, графика в играх и не только, базы данных) и сетевом
        (браузеры, расширения для них) программировании, разработке под микроконтроллеры и встраиваемые системы
        (&quot;интернет вещей&quot; и умные девайсы в том числе). Даже в &quot;<strong>Питончеге</strong>&quot;, так
        любимом всеми школьниками, многие библиотеки написаны фактически на <strong>C/C++</strong>, некоторые даже с
        применением <strong>ассемблера</strong>.
      </p>
      <p>
        <strong>По примерам заданий для практики на языке Си</strong> (кроме уже указанных):
      </p>
      <p>
        <strong>- Аналоги стандартных утилит Unix-систем.</strong>{" "}
      </p>
      <p>
        Советую упрощённо реализовать <strong>sort</strong> (со своей сортировкой и компаратором строк) для близкого
        знакомства с указателями и памятью вообще. Можно также поставить дополнительные условия типа необходимости
        отсортировать &quot;с конца&quot;, как бы рифмуя;
      </p>
      <p>
        <strong>- АТД</strong> стек, список, дерево (и любой другой);
      </p>
      <p>
        <strong>- Стековый вычислитель</strong> (по типу Forth-машины, можно с упрощениями) для использования
        написанного ранее стека и библиотеки работы со строками из первой задачи;
      </p>
      <p>
        <strong>- Аллокатор памяти из книги Игоря Жиркова</strong>. Полезный пример с лёгким погружением в системное
        программирование и профсреду;
      </p>
      <p>
        <strong>- Вычислитель (или упроститель) выражений по символьной записи</strong> (очень круто сделать её в
        формате LaTeX) для практики деревьев и использования своих же АТД. Очень крутой проект, его можно развить в том
        числе в самый настоящий компилятор;
      </p>
      <p>
        <strong>- Аналоги тетриса или змейки</strong>. Или любой другой интересной игры (возможно, даже выдуманной
        лично). Удобно применять для этого библиотеку ncurses;
      </p>
      <p>
        <strong>
          - Свои простые инструменты для проверки стиля или корректности программы на Си или другом языке.
        </strong>{" "}
        Возможно, на простейшем уровне. Подойдёт для практики строк и структур данных, АТД стек;
      </p>
      <p>
        <strong>- Инструмент для форматирования кода.</strong> Для тех же целей, что и предыдущая.
      </p>
    </Article>
  );
};
export default HowToStartInC;
